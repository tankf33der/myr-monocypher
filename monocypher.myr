pkg monocypher =
	type cfunc = void


	type __qc_va_elem = struct
		gp_offset : uint
		fp_offset : uint
		overflow_arg_area : void#
		reg_save_area : void#
	;;

	type __qc_va_list = __qc_va_elem#
	type int8_t = byte
	type int16_t = int16
	type int32_t = int
	type int64_t = int64
	type uint8_t = byte
	type uint16_t = uint16
	type uint32_t = uint
	type uint64_t = uint64
	type int_least8_t = byte
	type int_least16_t = int16
	type int_least32_t = int
	type int_least64_t = int64
	type uint_least8_t = byte
	type uint_least16_t = uint16
	type uint_least32_t = uint
	type uint_least64_t = uint64
	type int_fast8_t = byte
	type int_fast16_t = int64
	type int_fast32_t = int64
	type int_fast64_t = int64
	type uint_fast8_t = byte
	type uint_fast16_t = uint64
	type uint_fast32_t = uint64
	type uint_fast64_t = uint64
	type intptr_t = int64
	type uintptr_t = uint64
	type intmax_t = int64
	type uintmax_t = uint64
	type __gwchar_t = int
	type imaxdiv_t = struct
		quot : int64
		rem : int64
	;;

	type ptrdiff_t = int64
	type size_t = uint64
	type wchar_t = int
	type crypto_chacha_ctx = struct
		input : uint32_t[16]
		pool : uint32_t[16]
		pool_idx : size_t
	;;

	type crypto_poly1305_ctx = struct
		r : uint32_t[4]
		h : uint32_t[5]
		c : uint32_t[5]
		pad : uint32_t[4]
		c_idx : size_t
	;;

	type crypto_lock_ctx = struct
		chacha : crypto_chacha_ctx
		poly : crypto_poly1305_ctx
		ad_size : uint64_t
		message_size : uint64_t
		ad_phase : int
	;;

	type crypto_blake2b_ctx = struct
		hash : uint64_t[8]
		input_offset : uint64_t[2]
		input : uint64_t[16]
		input_idx : size_t
		hash_size : size_t
	;;

	type crypto_hash_ctx = crypto_blake2b_ctx
	type crypto_sign_ctx = struct
		hash : crypto_hash_ctx
		buf : uint8_t[96]
		pk : uint8_t[32]
	;;

	type crypto_check_ctx = struct
		hash : crypto_hash_ctx
		sig : uint8_t[64]
		pk : uint8_t[32]
	;;

	type crypto_kex_ctx = struct
		transcript : uint8_t[128]
		chaining_key : uint8_t[32]
		derived_keys : uint8_t[64]
		local_sk : uint8_t[32]
		local_pk : uint8_t[32]
		local_ske : uint8_t[32]
		local_pke : uint8_t[32]
		remote_pk : uint8_t[32]
		remote_pke : uint8_t[32]
		transcript_size : size_t
	;;

	type crypto_kex_client_ctx = struct
		ctx : crypto_kex_ctx
	;;

	type crypto_kex_server_ctx = struct
		ctx : crypto_kex_ctx
	;;


	extern const crypto_verify16	: (a : uint8_t#, b : uint8_t# -> int)
	extern const crypto_verify32	: (a : uint8_t#, b : uint8_t# -> int)
	extern const crypto_verify64	: (a : uint8_t#, b : uint8_t# -> int)
	extern const crypto_wipe	: (secret : void#, size : size_t -> void)
	extern const crypto_lock	: (mac : uint8_t#, cipher_text : uint8_t#, key : uint8_t#, nonce : uint8_t#, plain_text : uint8_t#, text_size : size_t -> void)
	extern const crypto_unlock	: (plain_text : uint8_t#, key : uint8_t#, nonce : uint8_t#, mac : uint8_t#, cipher_text : uint8_t#, text_size : size_t -> int)
	extern const crypto_lock_aead	: (mac : uint8_t#, cipher_text : uint8_t#, key : uint8_t#, nonce : uint8_t#, ad : uint8_t#, ad_size : size_t, plain_text : uint8_t#, text_size : size_t -> void)
	extern const crypto_unlock_aead	: (plain_text : uint8_t#, key : uint8_t#, nonce : uint8_t#, mac : uint8_t#, ad : uint8_t#, ad_size : size_t, cipher_text : uint8_t#, text_size : size_t -> int)
	extern const crypto_lock_init	: (ctx : crypto_lock_ctx#, key : uint8_t#, nonce : uint8_t# -> void)
	extern const crypto_lock_auth_ad	: (ctx : crypto_lock_ctx#, message : uint8_t#, message_size : size_t -> void)
	extern const crypto_lock_auth_message	: (ctx : crypto_lock_ctx#, cipher_text : uint8_t#, text_size : size_t -> void)
	extern const crypto_lock_update	: (ctx : crypto_lock_ctx#, cipher_text : uint8_t#, plain_text : uint8_t#, text_size : size_t -> void)
	extern const crypto_lock_final	: (ctx : crypto_lock_ctx#, mac : uint8_t# -> void)
	extern const crypto_unlock_update	: (ctx : crypto_lock_ctx#, plain_text : uint8_t#, cipher_text : uint8_t#, text_size : size_t -> void)
	extern const crypto_unlock_final	: (ctx : crypto_lock_ctx#, mac : uint8_t# -> int)
	extern const crypto_blake2b	: (hash : uint8_t#, message : uint8_t#, message_size : size_t -> void)
	extern const crypto_blake2b_general	: (hash : uint8_t#, hash_size : size_t, key : uint8_t#, key_size : size_t, message : uint8_t#, message_size : size_t -> void)
	extern const crypto_blake2b_init	: (ctx : crypto_blake2b_ctx# -> void)
	extern const crypto_blake2b_update	: (ctx : crypto_blake2b_ctx#, message : uint8_t#, message_size : size_t -> void)
	extern const crypto_blake2b_final	: (ctx : crypto_blake2b_ctx#, hash : uint8_t# -> void)
	extern const crypto_blake2b_general_init	: (ctx : crypto_blake2b_ctx#, hash_size : size_t, key : uint8_t#, key_size : size_t -> void)
	extern const crypto_argon2i	: (hash : uint8_t#, hash_size : uint32_t, work_area : void#, nb_blocks : uint32_t, nb_iterations : uint32_t, password : uint8_t#, password_size : uint32_t, salt : uint8_t#, salt_size : uint32_t -> void)
	extern const crypto_argon2i_general	: (hash : uint8_t#, hash_size : uint32_t, work_area : void#, nb_blocks : uint32_t, nb_iterations : uint32_t, password : uint8_t#, password_size : uint32_t, salt : uint8_t#, salt_size : uint32_t, key : uint8_t#, key_size : uint32_t, ad : uint8_t#, ad_size : uint32_t -> void)
	extern const crypto_key_exchange	: (shared_key : uint8_t#, your_secret_key : uint8_t#, their_public_key : uint8_t# -> int)
	extern const crypto_sign_public_key	: (public_key : uint8_t#, secret_key : uint8_t# -> void)
	extern const crypto_sign	: (signature : uint8_t#, secret_key : uint8_t#, public_key : uint8_t#, message : uint8_t#, message_size : size_t -> void)
	extern const crypto_check	: (signature : uint8_t#, public_key : uint8_t#, message : uint8_t#, message_size : size_t -> int)
	extern const crypto_sign_init_first_pass	: (ctx : crypto_sign_ctx#, secret_key : uint8_t#, public_key : uint8_t# -> void)
	extern const crypto_sign_update	: (ctx : crypto_sign_ctx#, message : uint8_t#, message_size : size_t -> void)
	extern const crypto_sign_init_second_pass	: (ctx : crypto_sign_ctx# -> void)
	extern const crypto_sign_final	: (ctx : crypto_sign_ctx#, signature : uint8_t# -> void)
	extern const crypto_check_init	: (ctx : crypto_check_ctx#, signature : uint8_t#, public_key : uint8_t# -> void)
	extern const crypto_check_update	: (ctx : crypto_check_ctx#, message : uint8_t#, message_size : size_t -> void)
	extern const crypto_check_final	: (ctx : crypto_check_ctx# -> int)
	extern const crypto_kex_xk1_init_client	: (client_ctx : crypto_kex_client_ctx#, random_seed : uint8_t#, client_sk : uint8_t#, client_pk : uint8_t#, server_pk : uint8_t# -> void)
	extern const crypto_kex_xk1_init_server	: (server_ctx : crypto_kex_server_ctx#, random_seed : uint8_t#, server_sk : uint8_t#, server_pk : uint8_t# -> void)
	extern const crypto_kex_xk1_1	: (client_ctx : crypto_kex_client_ctx#, msg1 : uint8_t# -> void)
	extern const crypto_kex_xk1_2	: (server_ctx : crypto_kex_server_ctx#, msg2 : uint8_t#, msg1 : uint8_t# -> void)
	extern const crypto_kex_xk1_3	: (client_ctx : crypto_kex_client_ctx#, session_key : uint8_t#, msg3 : uint8_t#, msg2 : uint8_t# -> int)
	extern const crypto_kex_xk1_4	: (server_ctx : crypto_kex_server_ctx#, session_key : uint8_t#, client_pk : uint8_t#, msg3 : uint8_t# -> int)
	extern const crypto_kex_x_init_client	: (client_ctx : crypto_kex_client_ctx#, random_seed : uint8_t#, client_sk : uint8_t#, client_pk : uint8_t#, server_pk : uint8_t# -> void)
	extern const crypto_kex_x_init_server	: (server_ctx : crypto_kex_server_ctx#, server_sk : uint8_t#, server_pk : uint8_t# -> void)
	extern const crypto_kex_x_1	: (client_ctx : crypto_kex_client_ctx#, session_key : uint8_t#, msg1 : uint8_t# -> void)
	extern const crypto_kex_x_2	: (server_ctx : crypto_kex_server_ctx#, session_key : uint8_t#, client_pk : uint8_t#, msg1 : uint8_t# -> int)
	extern const crypto_chacha20_H	: (out : uint8_t#, key : uint8_t#, in : uint8_t# -> void)
	extern const crypto_chacha20_init	: (ctx : crypto_chacha_ctx#, key : uint8_t#, nonce : uint8_t# -> void)
	extern const crypto_chacha20_x_init	: (ctx : crypto_chacha_ctx#, key : uint8_t#, nonce : uint8_t# -> void)
	extern const crypto_chacha20_set_ctr	: (ctx : crypto_chacha_ctx#, ctr : uint64_t -> void)
	extern const crypto_chacha20_encrypt	: (ctx : crypto_chacha_ctx#, cipher_text : uint8_t#, plain_text : uint8_t#, text_size : size_t -> void)
	extern const crypto_chacha20_stream	: (ctx : crypto_chacha_ctx#, stream : uint8_t#, size : size_t -> void)
	extern const crypto_poly1305	: (mac : uint8_t#, message : uint8_t#, message_size : size_t, key : uint8_t# -> void)
	extern const crypto_poly1305_init	: (ctx : crypto_poly1305_ctx#, key : uint8_t# -> void)
	extern const crypto_poly1305_update	: (ctx : crypto_poly1305_ctx#, message : uint8_t#, message_size : size_t -> void)
	extern const crypto_poly1305_final	: (ctx : crypto_poly1305_ctx#, mac : uint8_t# -> void)
	extern const crypto_x25519_public_key	: (public_key : uint8_t#, secret_key : uint8_t# -> void)
	extern const crypto_x25519	: (raw_shared_secret : uint8_t#, your_secret_key : uint8_t#, their_public_key : uint8_t# -> int)
;;
